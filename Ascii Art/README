Adjust Brightness To Pixel
=============================================================================================================
I chose to divide the image into sub-images, then for each sub-image I went through all its pixels using
a function that the facade provided me, I converted each pixel to a gray pixel and calculated the average
of all the pixels, so I've got the average brightness value of the sub-image.
At the same time I calculated the brightness levels of the characters that provided to me and normalized
them (I performed a linear stretch on them) so that I could adjust for each sub-image the closet brightness
value of some character. Finally, I've built an array according to these values and returned it.
The main method that centralizes all the processes described above is chooseChars.

Collection Usage
=============================================================================================================

1.BrightnessImgCharMatcher class
--------------------------------
I created a HashMap whose key types are images and the values types are double type and there I kept the
brightness value of each sub-image I calculated. I did this because when we want to render an image that
we already render, we will not have to recalculate the brightness values of any sub-image that was already
calculated during the program run, we will actually be able to access these values in O(1)


2. Shell class
--------------------------------
I used HashSet to save all the characters. As we know, searching for each character in HashSet costs us
O(1) actions, however searching for a character in a list is an action that costs us O(n). Hence our runtime
will improve when we want to access some character while program is running.






